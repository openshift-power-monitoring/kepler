// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type keplerEvent struct {
	EventType      uint64
	Ts             uint64
	Pid            uint32
	Tid            uint32
	OffcpuPid      uint32
	OffcpuTid      uint32
	OffcpuCgroupId uint64
	CpuCycles      uint64
	CpuInstr       uint64
	CacheMiss      uint64
	CpuId          uint32
	IrqNumber      uint32
}

type keplerEventType uint32

const (
	keplerEventTypeSCHED_SWITCH   keplerEventType = 1
	keplerEventTypeIRQ            keplerEventType = 2
	keplerEventTypePAGE_CACHE_HIT keplerEventType = 3
	keplerEventTypeFREE           keplerEventType = 4
)

type keplerIrqType uint32

const (
	keplerIrqTypeNET_TX keplerIrqType = 2
	keplerIrqTypeNET_RX keplerIrqType = 3
	keplerIrqTypeBLOCK  keplerIrqType = 4
)

// loadKepler returns the embedded CollectionSpec for kepler.
func loadKepler() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KeplerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kepler: %w", err)
	}

	return spec, err
}

// loadKeplerObjects loads kepler and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*keplerObjects
//	*keplerPrograms
//	*keplerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKeplerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKepler()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// keplerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type keplerSpecs struct {
	keplerProgramSpecs
	keplerMapSpecs
}

// keplerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type keplerProgramSpecs struct {
	KeplerIrqTrace             *ebpf.ProgramSpec `ebpf:"kepler_irq_trace"`
	KeplerReadPageTrace        *ebpf.ProgramSpec `ebpf:"kepler_read_page_trace"`
	KeplerSchedProcessFree     *ebpf.ProgramSpec `ebpf:"kepler_sched_process_free"`
	KeplerSchedSwitchTrace     *ebpf.ProgramSpec `ebpf:"kepler_sched_switch_trace"`
	KeplerWritePageTrace       *ebpf.ProgramSpec `ebpf:"kepler_write_page_trace"`
	TestKeplerSchedProcessFree *ebpf.ProgramSpec `ebpf:"test_kepler_sched_process_free"`
	TestKeplerSchedSwitchTrace *ebpf.ProgramSpec `ebpf:"test_kepler_sched_switch_trace"`
	TestKeplerWritePageTrace   *ebpf.ProgramSpec `ebpf:"test_kepler_write_page_trace"`
}

// keplerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type keplerMapSpecs struct {
	CacheMissEventReader       *ebpf.MapSpec `ebpf:"cache_miss_event_reader"`
	CpuCyclesEventReader       *ebpf.MapSpec `ebpf:"cpu_cycles_event_reader"`
	CpuInstructionsEventReader *ebpf.MapSpec `ebpf:"cpu_instructions_event_reader"`
	Rb                         *ebpf.MapSpec `ebpf:"rb"`
}

// keplerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKeplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type keplerObjects struct {
	keplerPrograms
	keplerMaps
}

func (o *keplerObjects) Close() error {
	return _KeplerClose(
		&o.keplerPrograms,
		&o.keplerMaps,
	)
}

// keplerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKeplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type keplerMaps struct {
	CacheMissEventReader       *ebpf.Map `ebpf:"cache_miss_event_reader"`
	CpuCyclesEventReader       *ebpf.Map `ebpf:"cpu_cycles_event_reader"`
	CpuInstructionsEventReader *ebpf.Map `ebpf:"cpu_instructions_event_reader"`
	Rb                         *ebpf.Map `ebpf:"rb"`
}

func (m *keplerMaps) Close() error {
	return _KeplerClose(
		m.CacheMissEventReader,
		m.CpuCyclesEventReader,
		m.CpuInstructionsEventReader,
		m.Rb,
	)
}

// keplerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKeplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type keplerPrograms struct {
	KeplerIrqTrace             *ebpf.Program `ebpf:"kepler_irq_trace"`
	KeplerReadPageTrace        *ebpf.Program `ebpf:"kepler_read_page_trace"`
	KeplerSchedProcessFree     *ebpf.Program `ebpf:"kepler_sched_process_free"`
	KeplerSchedSwitchTrace     *ebpf.Program `ebpf:"kepler_sched_switch_trace"`
	KeplerWritePageTrace       *ebpf.Program `ebpf:"kepler_write_page_trace"`
	TestKeplerSchedProcessFree *ebpf.Program `ebpf:"test_kepler_sched_process_free"`
	TestKeplerSchedSwitchTrace *ebpf.Program `ebpf:"test_kepler_sched_switch_trace"`
	TestKeplerWritePageTrace   *ebpf.Program `ebpf:"test_kepler_write_page_trace"`
}

func (p *keplerPrograms) Close() error {
	return _KeplerClose(
		p.KeplerIrqTrace,
		p.KeplerReadPageTrace,
		p.KeplerSchedProcessFree,
		p.KeplerSchedSwitchTrace,
		p.KeplerWritePageTrace,
		p.TestKeplerSchedProcessFree,
		p.TestKeplerSchedSwitchTrace,
		p.TestKeplerWritePageTrace,
	)
}

func _KeplerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kepler_bpfel.o
var _KeplerBytes []byte
